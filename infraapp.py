import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from prophet import Prophet
from pptx import Presentation
from pptx.util import Inches
from io import BytesIO
import os
from groq import Groq
from dotenv import load_dotenv

# Load API key
load_dotenv()
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
if not GROQ_API_KEY:
    st.error("üö® API Key is missing! Set it in Streamlit Secrets or a .env file.")
    st.stop()

# Page settings
st.set_page_config(page_title="Usage & Cost Forecasting Agent", page_icon="üìä", layout="wide")
st.title("üìä Forecast Total Cost & Usage by Product Group")
st.markdown("Upload an Excel file with `Period`, `Product`, `Total Cost`, and `Total Usage` columns.")

uploaded_file = st.file_uploader("üì§ Upload Excel File", type=["xlsx"])
forecast_period = st.slider("üîÆ Forecast Horizon (months)", min_value=1, max_value=36, value=12)

if uploaded_file:
    df = pd.read_excel(uploaded_file)
    
    required_columns = ['Period', 'Product', 'Total Cost', 'Total Usage']
    if not all(col in df.columns for col in required_columns):
        st.error(f"‚ùå The Excel file must include these columns: {required_columns}")
        st.stop()

    df['Period'] = pd.to_datetime(df['Period'])
    products = df['Product'].dropna().unique()

    prs = Presentation()
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    slide.shapes.title.text = "Usage & Cost Forecasting"
    slide.placeholders[1].text = "Generated by FP&A AI Agent"

    client = Groq(api_key=GROQ_API_KEY)

    for metric in ['Total Cost', 'Total Usage']:
        for product in products:
            st.subheader(f"üìà {metric} Forecast for {product}")
            df_product = df[df['Product'] == product].copy()
            df_metric = df_product[['Period', metric]].rename(columns={'Period': 'ds', metric: 'y'}).dropna()

            if df_metric.empty or df_metric['y'].sum() == 0:
                st.warning(f"No valid data for {metric} in {product}")
                continue

            model = Prophet()
            model.fit(df_metric)
            future = model.make_future_dataframe(periods=forecast_period, freq='M')
            forecast = model.predict(future)

            fig = model.plot(forecast)
            st.pyplot(fig)

            # Save chart to PowerPoint
            img_stream = BytesIO()
            fig.savefig(img_stream, format='png')
            img_stream.seek(0)
            slide = prs.slides.add_slide(prs.slide_layouts[5])
            slide.shapes.title.text = f"{product} - {metric} Forecast"
            slide.shapes.add_picture(img_stream, Inches(0.5), Inches(1.2), width=Inches(9))

            # Generate AI commentary
            recent_data = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(24).to_json(orient='records', date_format='iso')
            prompt = f"""
            You are the Head of FP&A at a SaaS company. Forecasting {metric} for the {product} product group, provide:
            - Key insights and trends.
            - Risks or anomalies.
            - CFO-level summary using the Pyramid Principle.
            - Strategic recommendations.

            JSON Data: {recent_data}
            """

            response = client.chat.completions.create(
                messages=[
                    {"role": "system", "content": "You are a financial expert specializing in SaaS forecasting."},
                    {"role": "user", "content": prompt}
                ],
                model="llama3-8b-8192"
            )
            commentary = response.choices[0].message.content
            st.markdown(f"### üß† AI Commentary for {product} - {metric}")
            st.write(commentary)

            # Add commentary to PowerPoint
            slide = prs.slides.add_slide(prs.slide_layouts[1])
            slide.shapes.title.text = f"{product} - {metric} Insights"
            text_box = slide.shapes.placeholders[1]
            text_box.text = commentary

    # Export PowerPoint
    ppt_output = BytesIO()
    prs.save(ppt_output)
    ppt_output.seek(0)

    st.download_button("üì• Download Executive PowerPoint Report", data=ppt_output, file_name="forecast_summary.pptx", mime="application/vnd.openxmlformats-officedocument.presentationml.presentation")
